// Dsp-block DirectDigitalSynthesizer
// Direct Digital Synthesizer (DDS) with sine lookup

package direct_digital_synthesizer

import chisel3._
import chisel3.util._
import chisel3.experimental._
import chisel3.stage.{ChiselStage, ChiselGeneratorAnnotation}

// IO definition
class dds_io(val accWidth: Int, val outWidth: Int) extends Bundle {
  val A      = Input(UInt(accWidth.W))
  //val initdone = Input(Bool())
  val B      = Output(UInt(accWidth.W))
}

/**
  * DDS module using a phase accumulator and sine LUT
  * @param accWidth Width of the phase accumulator
  * @param lutBits Number of address bits for the sine LUT
  * @param outWidth Output sample width
  */
class DirectDigitalSynthesizer(val accWidth: Int = 32, val lutBits: Int = 10, val outWidth: Int = 12)
  extends Module {

  val io = IO(new dds_io(accWidth, outWidth))

  // Phase accumulator
  val phase = RegInit(0.U(accWidth.W))
  /*when(io.initdone) {
    phase := phase + io.A
  }*/
  phase := phase + io.A

  // Sine LUT
  val lutDepth = 1 << lutBits
  val sineLut = VecInit((0 until lutDepth).map { i =>
    val angle = (2.0 * math.Pi * i) / lutDepth
    val maxAmp = (1 << (outWidth - 1)) - 1
    val amp = (math.sin(angle) * maxAmp).round.toInt
    amp.S(outWidth.W)
  })

  val idx = phase(accWidth - 1, accWidth - lutBits)
  io.B := sineLut(idx)
}

/**
  * Verilog generator
  */
object direct_digital_synthesizer extends App {
  val annos = Seq(ChiselGeneratorAnnotation(() =>
    new DirectDigitalSynthesizer(
      accWidth = 32,
      lutBits = 10,
      outWidth = 12
    )
  ))
  (new ChiselStage).execute(args, annos)
}
